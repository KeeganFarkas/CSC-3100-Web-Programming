const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const dbSource = "reservations.db";
const db = new sqlite3.Database(dbSource);

const HTTP_PORT = 8000;
console.log("Listening on port " + HTTP_PORT);
var app = express();
app.use(cors());

class InstallationInfo {
    constructor(strName, strPrimaryColor, strAddress){
        this.name = strName;
        this.primaryColor = strPrimaryColor;
        this.address = strAddress;
    }
}

let objCookevillePolice = new InstallationInfo("Cookeville Police", "blue", "1019 Neal Street");

////// RERSERVATIONS //////
/*
Method: GET
Required Parameters:
Expected Returns: JSON Object with a key of Reservations 
                  containing an array of all Reservations
*/
app.get("/reservations",(req,res,next) => {
    let strCommand = "SELECT * FROM tblReservations";
    db.all(strCommand,function(err,rows){
        if(err){
            res.status(400).json({error:err.message});
        } else{
            res.status(200).json({Reservations: rows});
        }
    })
})

/*
Method: DELETE
Required Parameters: id
Expected Returns: JSON object with key of Outcome
*/
app.delete("/reservations/:id",(req,res,next) => {
    let strID = req.params.id;

    if(strID){
        let strCommand = "DELETE FROM tblReservations WHERE id = ?";
        let arrParameters = [strID];
        db.run(strCommand,arrParameters,function(err){
            if(err){
                res.status(400).json({error:err.message});
            } else{
                res.status(200).json({Outcome: "Reservation deleted"});
            }
        })
    } else{
        res.status(400).json({error:"no reservation id provided"});
    }
})

////// INSTALLINFO //////
/*
Method: GET
Required Parameters: 
Expected Returns: JSON Object containing Installation Info
*/
app.get("/installinfo",(req,res,next) => {
    res.status(200).send(objCookevillePolice);
})

app.listen(HTTP_PORT);